{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useIsMounted = void 0;\nvar react_1 = require(\"react\");\n/**\n * Check if the component is still mounted.\n * Does not use `useState` hook so it does not trigger additional renders.\n * This might be used to avoid the \"set state on unmounted component\" react warning.\n */\nfunction useIsMounted() {\n  var isMounted = react_1.useRef(false);\n  react_1.useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\nexports.useIsMounted = useIsMounted;","map":{"version":3,"names":["react_1","require","useIsMounted","isMounted","useRef","useEffect","current","exports"],"sources":["../../src/hooks/useIsMounted.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAEA;;;;;AAKA,SAAgBC,YAAYA,CAAA;EAC1B,IAAMC,SAAS,GAAGH,OAAA,CAAAI,MAAM,CAAU,KAAK,CAAC;EAExCJ,OAAA,CAAAK,SAAS,CAAC;IACRF,SAAS,CAACG,OAAO,GAAG,IAAI;IACxB,OAAO;MAAM,OAACH,SAAS,CAACG,OAAO,GAAG,KAAK;IAA1B,CAA2B;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,SAAS;AAClB;AATAI,OAAA,CAAAL,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}