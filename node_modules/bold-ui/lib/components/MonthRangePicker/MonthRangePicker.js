"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthRangePicker = void 0;
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var __1 = require("../..");
var FocusManagerContainer_1 = require("../FocusManagerContainer");
var ControlledMonthRangeCalendar_1 = require("./RangeMonthCalendar/ControlledMonthRangeCalendar");
var MonthRangePickerInput_1 = require("./MonthRangePickerInput");
var util_1 = require("./util");
function MonthRangePicker(props) {
    var minMonth = props.minMonth, maxMonth = props.maxMonth, popperProps = props.popperProps, onFocus = props.onFocus, onBlur = props.onBlur, onChange = props.onChange, value = props.value, icon = props.icon, monthPickerProps = props.monthPickerProps, rest = __rest(props, ["minMonth", "maxMonth", "popperProps", "onFocus", "onBlur", "onChange", "value", "icon", "monthPickerProps"]);
    var _a = react_1.useState(1), rangeInputFocus = _a[0], setRangeInputFocus = _a[1];
    var _b = react_1.useState({ month: undefined, year: undefined }), visibleMonth = _b[0], setVisibleMonth = _b[1];
    var _c = react_1.useState(false), open = _c[0], setOpen = _c[1];
    var finalInputRef = react_1.useRef();
    var _d = react_1.useState(), anchorRef = _d[0], setAnchorRef = _d[1];
    var _e = react_1.useState(), popupRef = _e[0], setPopupRef = _e[1];
    var _f = __1.useStyles(createStyles), classes = _f.classes, css = _f.css;
    react_1.useEffect(function () {
        var month = function () {
            if (rangeInputFocus === 1 && (value === null || value === void 0 ? void 0 : value.start)) {
                return value.start;
            }
            else if (rangeInputFocus === 2 && (value === null || value === void 0 ? void 0 : value.end)) {
                return value.end;
            }
            else if ((value === null || value === void 0 ? void 0 : value.start) && !(value === null || value === void 0 ? void 0 : value.end)) {
                return value.start;
            }
            else if (!(value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) {
                return value.end;
            }
            else {
                var today = new Date();
                return { month: today.getMonth(), year: today.getFullYear() };
            }
        };
        setVisibleMonth(month);
    }, [rangeInputFocus, value]);
    var _g = react_popper_1.usePopper(anchorRef, popupRef, __assign(__assign({}, popperProps), { placement: 'bottom' })), popperStyle = _g.styles.popper, placement = _g.attributes.placement;
    var handleInputFocus = function (inputOnFocus) { return setRangeInputFocus(inputOnFocus); };
    var handleFocusIn = function (event) {
        onFocus && onFocus(event);
        setOpen(true);
    };
    var handleFocusOut = function (event) {
        onBlur && onBlur(event);
        setOpen(false);
    };
    var handleMonthRangeChanged = function (range) {
        var start = range.start, end = range.end;
        start && end
            ? onChange(util_1.transformRangeReferenceMonth(range))
            : !end
                ? onChange(util_1.transformRangeReferenceMonth({ start: start, end: start }))
                : onChange(util_1.transformRangeReferenceMonth({ start: end, end: end }));
    };
    var handleInputMonthRangeChanged = function (range) { return onChange(util_1.transformRangeReferenceMonth(range)); };
    var handleOnVisibleMonthChange = function (month) { return setVisibleMonth(month); };
    var handleOnMonhtClick = function () { return finalInputRef.current.focus(); };
    return (react_1.default.createElement(FocusManagerContainer_1.FocusManagerContainer, { onFocusIn: handleFocusIn, onFocusOut: handleFocusOut },
        react_1.default.createElement(MonthRangePickerInput_1.MonthRangePickerInput, __assign({ value: value, onChange: handleInputMonthRangeChanged, divRef: setAnchorRef, minMonth: minMonth, maxMonth: maxMonth, icon: icon, finalInputRef: finalInputRef, onInputOnFocus: handleInputFocus }, rest)),
        open && (react_1.default.createElement("div", { ref: setPopupRef, className: css(classes.popup, popperStyle), tabIndex: -1, "data-placement": placement },
            react_1.default.createElement(ControlledMonthRangeCalendar_1.ControlledMonthRangeCalendar, __assign({ value: value, onChange: handleMonthRangeChanged, onMonthClick: handleOnMonhtClick, inputOnFocus: rangeInputFocus, visibleMonth: visibleMonth, onVisibleMonthChange: handleOnVisibleMonthChange, minMonth: minMonth, maxMonth: maxMonth, isDisabled: util_1.disabledByMonth(minMonth, maxMonth) }, monthPickerProps))))));
}
exports.MonthRangePicker = MonthRangePicker;
var createStyles = function (theme) { return ({
    popup: {
        zIndex: theme.zIndex.popper,
    },
}); };
//# sourceMappingURL=MonthRangePicker.js.map