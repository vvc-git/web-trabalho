"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthRangeCalendar = void 0;
var react_1 = __importDefault(require("react"));
var util_1 = require("../util");
var GenericMonthRangeCalendar_1 = require("./GenericMonthRangeCalendar");
function MonthRangeCalendar(props) {
    var value = props.value, inputOnFocus = props.inputOnFocus, minMonth = props.minMonth, maxMonth = props.maxMonth, rest = __rest(props, ["value", "inputOnFocus", "minMonth", "maxMonth"]);
    var handleIsInTheRange = function (month) {
        if (!(value === null || value === void 0 ? void 0 : value.start)) {
            if (value === null || value === void 0 ? void 0 : value.end) {
                return util_1.isSameReferenceMonth(month, value.end);
            }
            else {
                return false;
            }
        }
        if (!value.end) {
            return util_1.isSameReferenceMonth(month, value.start);
        }
        if ((util_1.isLessOrEqualThan(value.start, month) && util_1.isLessOrEqualThan(month, value.end)) ||
            (util_1.isLessOrEqualThan(value.end, month) && util_1.isLessOrEqualThan(month, value.start))) {
            return true;
        }
        return false;
    };
    var hoverControl = function (month, hoverMonth) {
        if (!value.start && !value.end) {
            return util_1.isSameReferenceMonth(month, hoverMonth);
        }
        else if (inputOnFocus) {
            if (!(value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) {
                if (inputOnFocus === 1) {
                    return ((util_1.isLessThan(value.end, month) && util_1.isGreaterOrEqualThan(hoverMonth, month)) ||
                        (util_1.isGreaterThan(value.end, month) && util_1.isLessOrEqualThan(hoverMonth, month)));
                }
                else {
                    return util_1.isSameReferenceMonth(month, hoverMonth);
                }
            }
            else if ((value === null || value === void 0 ? void 0 : value.start) && !(value === null || value === void 0 ? void 0 : value.end)) {
                if (inputOnFocus === 2) {
                    return ((util_1.isLessThan(value.start, month) && util_1.isGreaterOrEqualThan(hoverMonth, month)) ||
                        (util_1.isGreaterThan(value.start, month) && util_1.isLessOrEqualThan(hoverMonth, month)));
                }
                else {
                    return util_1.isSameReferenceMonth(month, hoverMonth);
                }
            }
            else {
                if (inputOnFocus === 1) {
                    return ((util_1.isGreaterThan(value.start, month) && util_1.isLessOrEqualThan(hoverMonth, month)) ||
                        (util_1.isLessThan(value.end, month) && util_1.isSameReferenceMonth(hoverMonth, month)));
                }
                else {
                    return ((util_1.isLessThan(value.end, month) && util_1.isGreaterOrEqualThan(hoverMonth, month)) ||
                        (util_1.isGreaterThan(value.end, month) && util_1.isSameReferenceMonth(hoverMonth, month)));
                }
            }
        }
    };
    var isInHoverRange = function (month, hoverMonth) {
        return hoverMonth &&
            (!minMonth || util_1.isGreaterOrEqualThan(month, minMonth)) &&
            (!maxMonth || util_1.isLessOrEqualThan(month, maxMonth)) &&
            hoverControl(month, hoverMonth);
    };
    return react_1.default.createElement(GenericMonthRangeCalendar_1.GenericMonthRangeCalendar, __assign({ isInTheRange: handleIsInTheRange, isInTheHoverRange: isInHoverRange }, rest));
}
exports.MonthRangeCalendar = MonthRangeCalendar;
//# sourceMappingURL=MonthRangeCalendar.js.map