"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeekPickerMinMaxDate = exports.WeekPicker = exports.MinMaxDate = exports.Default = void 0;
var addon_actions_1 = require("@storybook/addon-actions");
var addon_knobs_1 = require("@storybook/addon-knobs");
var react_1 = __importDefault(require("react"));
var DateRangePicker_1 = require("./DateRangePicker");
var todayMinus10 = new Date(new Date().setDate(new Date().getDate() - 10));
var weekStart = new Date(2020, 11, 13);
var weekEnd = new Date(2021, 0, 9);
var period = { startDate: todayMinus10, endDate: new Date() };
var periodWeek = { startDate: weekStart, endDate: weekEnd };
exports.default = {
    title: 'Components/DateRangePicker',
};
exports.Default = function () { return (react_1.default.createElement(DateRangePicker_1.DateRangePicker, { clearable: addon_knobs_1.boolean('clearable', true), label: addon_knobs_1.text('label', 'Text label'), disabled: addon_knobs_1.boolean('disabled', false), error: addon_knobs_1.text('error', ''), inline: addon_knobs_1.boolean('inline', false), required: addon_knobs_1.boolean('required', true), onChange: addon_actions_1.action('changed'), icon: 'calendarOutline', value: period })); };
exports.MinMaxDate = function () { return (react_1.default.createElement(DateRangePicker_1.DateRangePicker, { clearable: addon_knobs_1.boolean('clearable', true), label: addon_knobs_1.text('label', 'Text label'), disabled: addon_knobs_1.boolean('disabled', false), error: addon_knobs_1.text('error', ''), required: addon_knobs_1.boolean('required', true), onChange: addon_actions_1.action('changed'), icon: 'calendarOutline', minDate: todayMinus10, maxDate: new Date() })); };
exports.WeekPicker = function () { return (react_1.default.createElement(DateRangePicker_1.DateRangePicker, { clearable: addon_knobs_1.boolean('clearable', true), label: addon_knobs_1.text('label', 'Text label'), disabled: addon_knobs_1.boolean('disabled', false), error: addon_knobs_1.text('error', ''), required: addon_knobs_1.boolean('required', true), onChange: addon_actions_1.action('changed'), icon: 'calendarOutline', onlyWeeks: true, value: periodWeek })); };
exports.WeekPickerMinMaxDate = function () { return (react_1.default.createElement(DateRangePicker_1.DateRangePicker, { clearable: addon_knobs_1.boolean('clearable', true), label: addon_knobs_1.text('label', 'Text label'), disabled: addon_knobs_1.boolean('disabled', false), error: addon_knobs_1.text('error', ''), required: addon_knobs_1.boolean('required', true), onChange: addon_actions_1.action('changed'), icon: 'calendarOutline', minDate: weekStart, maxDate: new Date(), onlyWeeks: true, value: periodWeek })); };
//# sourceMappingURL=DateRangePicker.stories.js.map