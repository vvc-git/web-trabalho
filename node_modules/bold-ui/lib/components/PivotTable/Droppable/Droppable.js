"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Droppable = void 0;
/** @jsx jsx */
var core_1 = require("@emotion/core");
var react_1 = require("react");
var react_dnd_1 = require("react-dnd");
var __1 = require("../../..");
var InternalDraggable_1 = require("../Draggable/InternalDraggable");
var InternalFilterDraggable_1 = require("../Draggable/InternalFilterDraggable");
var style_1 = require("./style");
function Droppable(props) {
    var name = props.name, keyState = props.keyState, keyMapping = props.keyMapping, accept = props.accept, filter = props.filter, handleKeyUpdate = props.handleKeyUpdate, onKeyNav = props.onKeyNav;
    if (filter) {
        if (filter.keys.size === 0)
            throw new Error('The filter keys are empty, which must contain the keys and its options');
        var keysWithoutFilters = Array.from(filter.keys.keys()).filter(function (key) { return filter.keys.get(key).length === 0; });
        if (keysWithoutFilters.length > 0) {
            if (keysWithoutFilters.length === 1)
                throw new Error("The key '" + keysWithoutFilters.toString() + "' is defined in filter keys but doesn't have options");
            else
                throw new Error("The keys [" + keysWithoutFilters.toString() + "] are defined in filter keys but don't have options");
        }
    }
    var locale = __1.useLocale();
    var _a = react_dnd_1.useDrop({
        accept: accept,
        drop: function (item) {
            if (!keyState.includes(item.name)) {
                var newKeys = __spreadArrays(keyState, [item.name]);
                handleKeyUpdate && handleKeyUpdate(newKeys);
                return { result: true };
            }
            else {
                var pos = keyState.findIndex(function (element) { return element === item.name; });
                var temp = __spreadArrays(keyState);
                temp.splice(pos, 1);
                var newKeys = __spreadArrays(temp, [item.name]);
                handleKeyUpdate && handleKeyUpdate(newKeys);
                return { result: false };
            }
        },
        collect: function (monitor) { return ({
            canDrop: !!monitor.canDrop(),
            isOver: monitor.isOver() ? monitor.getItem().origin !== name : monitor.isOver(),
        }); },
    }), isOver = _a[0].isOver, drag = _a[1];
    function deleteByKey(id) {
        var tempKeys = __spreadArrays(keyState);
        var index = tempKeys.indexOf(id);
        tempKeys.splice(index, 1);
        handleKeyUpdate === null || handleKeyUpdate === void 0 ? void 0 : handleKeyUpdate(tempKeys);
    }
    var draggableButtons = react_1.useMemo(function () {
        return keyState.map(function (key) {
            var filterOptions = filter === null || filter === void 0 ? void 0 : filter.keys.get(key);
            if ((filter === null || filter === void 0 ? void 0 : filter.state) && (filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.length) > 0) {
                return (core_1.jsx(InternalFilterDraggable_1.InternalFilterDraggable, { key: key, type: accept, name: key, filterItems: filterOptions, selectedItems: filter.state.get(key) || new Set(), value: keyMapping.get(key) ? keyMapping.get(key).keyName : key, onFilterUpdate: filter.handleUpdate, origin: name, onDragEnd: function () { return deleteByKey(key); }, onKeyNav: onKeyNav }));
            }
            else {
                return (core_1.jsx(InternalDraggable_1.InternalDraggable, { key: key, type: accept, name: key, value: keyMapping.get(key) ? keyMapping.get(key).keyName : key, origin: name, onDragEnd: function () { return deleteByKey(key); }, onKeyNav: onKeyNav }));
            }
        });
    }, [keyState, filter, accept, keyMapping, name, onKeyNav, deleteByKey]);
    var hasKeys = keyState.length > 0;
    var classes = __1.useStyles(style_1.droppableCreateStyles, hasKeys).classes;
    return (core_1.jsx("div", { ref: drag, className: classes.box }, hasKeys ? (core_1.jsx("div", null, draggableButtons)) : (core_1.jsx("div", { className: classes.placeholder },
        core_1.jsx("i", null, isOver ? locale.droppable.isOver : locale.droppable.isNotOver)))));
}
exports.Droppable = Droppable;
//# sourceMappingURL=Droppable.js.map