"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalFilterDraggable = void 0;
var react_1 = __importStar(require("react"));
var react_dnd_1 = require("react-dnd");
var match_sorter_1 = __importDefault(require("match-sorter"));
var __1 = require("../..");
var styles_1 = require("../../../styles");
var i18n_1 = require("../../../i18n");
var ActualQuantity_1 = require("./types/ActualQuantity");
var util_1 = require("./util");
var DraggableRow_1 = require("./DraggableRow");
var style_1 = require("./style");
var DraggableWrapper_1 = require("./DraggableWrapper");
function InternalFilterDraggable(props) {
    var name = props.name, origin = props.origin, value = props.value, filterItems = props.filterItems, selectedItems = props.selectedItems, onDragEnd = props.onDragEnd, onFilterUpdate = props.onFilterUpdate, formatter = props.formatter, onKeyNav = props.onKeyNav, type = props.type;
    var _a = react_1.useState(filterItems), searchedFilterSet = _a[0], setSearchedFilterSet = _a[1];
    var _b = react_1.useState(false), open = _b[0], setOpen = _b[1];
    var _c = react_1.useState(util_1.getQuantityValue(selectedItems, filterItems)), all = _c[0], setAll = _c[1];
    var _d = react_1.useState(), buttonRef = _d[0], setButtonRef = _d[1];
    var classes = styles_1.useStyles(style_1.draggableCreateStyles).classes;
    var _e = react_dnd_1.useDrag({
        item: { type: type, name: name, origin: origin },
        end: function (_item, monitor) {
            if (monitor.getDropResult()['result'])
                onDragEnd();
        },
        collect: function (monitor) { return ({
            isDragging: !!monitor.isDragging(),
        }); },
    }), isDragging = _e[0].isDragging, drag = _e[1];
    var locale = i18n_1.useLocale();
    if (filterItems.length < 1) {
        throw new Error("The filterItems must have at least one element");
    }
    selectedItems.forEach(function (value) {
        if (!filterItems.includes(value)) {
            throw new Error("The value '" + value + "' of selectedItems doesn't exist in filterItems[" + filterItems.toString() + "]");
        }
    });
    var handleClick = function () { return (open ? handleClose() : setOpen(true)); };
    var handleClose = function () {
        setOpen(false);
        setSearchedFilterSet(filterItems);
    };
    var handleSelect = function (element) { return function (event) {
        selectedItems.has(element) ? selectedItems.delete(element) : selectedItems.add(element);
        onFilterUpdate(name, new Set(selectedItems));
        setAll(util_1.getQuantityValue(selectedItems, filterItems));
    }; };
    var handleKeyDown = function (filterKey) { return function (event) {
        onKeyNav(util_1.getKeyDirection(event.nativeEvent.key), origin, filterKey);
        onDragEnd();
    }; };
    var handleSearch = function () { return function (event) {
        return setSearchedFilterSet(match_sorter_1.default(filterItems, event.currentTarget.value, { threshold: match_sorter_1.default.rankings.STARTS_WITH }));
    }; };
    var handleSelectAll = function () { return function () {
        if (all === ActualQuantity_1.ActualQuantity.ALL) {
            setAll(ActualQuantity_1.ActualQuantity.NONE);
            onFilterUpdate(name, new Set(new Set()));
        }
        else {
            setAll(ActualQuantity_1.ActualQuantity.ALL);
            onFilterUpdate(name, new Set(filterItems));
        }
    }; };
    return (react_1.default.createElement(DraggableWrapper_1.DraggableWrapper, { drag: drag, isDragging: isDragging },
        react_1.default.createElement(__1.Button, { style: classes.button, innerRef: setButtonRef, onClick: handleClick, onKeyDown: handleKeyDown(name), size: 'small', kind: 'primary', skin: 'ghost' },
            react_1.default.createElement(__1.HFlow, { hSpacing: 0.5 },
                react_1.default.createElement(__1.Icon, { icon: 'dragdrop' }),
                value,
                open ? react_1.default.createElement(__1.Icon, { icon: 'angleUp' }) : react_1.default.createElement(__1.Icon, { icon: 'angleDown' }))),
        react_1.default.createElement(__1.Dropdown, { anchorRef: buttonRef, open: open, autoclose: false, onClose: handleClose, popperProps: { placement: 'bottom' }, style: classes.dropdown },
            react_1.default.createElement("div", { key: 'dropDownArea', className: classes.dropdownArea, onBlur: function (e) { return e.stopPropagation(); } },
                react_1.default.createElement(__1.DropdownItem, { className: classes.noOutline },
                    react_1.default.createElement("div", { className: classes.search },
                        react_1.default.createElement(__1.TextField, { name: 'iconized', id: 'iconized', placeholder: locale.draggable.search, icon: 'zoomOutline', onChange: handleSearch() }))),
                searchedFilterSet.length === filterItems.length && (react_1.default.createElement(__1.DropdownItem, { key: locale.draggable.all, className: classes.dropdownItem, "aria-checked": all === ActualQuantity_1.ActualQuantity.ALL ? 'true' : all === ActualQuantity_1.ActualQuantity.NONE ? 'false' : 'mixed' },
                    react_1.default.createElement(__1.Checkbox, { label: locale.draggable.allItems, onChange: handleSelectAll(), checked: all === ActualQuantity_1.ActualQuantity.ALL, indeterminate: all === ActualQuantity_1.ActualQuantity.ONE_OR_MORE }))),
                searchedFilterSet.map(function (value) { return (react_1.default.createElement(DraggableRow_1.DraggableRow, { key: value, value: value, name: name, selected: selectedItems.has(value), handleSelect: handleSelect, formatter: formatter })); })))));
}
exports.InternalFilterDraggable = InternalFilterDraggable;
//# sourceMappingURL=InternalFilterDraggable.js.map