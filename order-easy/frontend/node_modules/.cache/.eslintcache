[{"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/index.tsx":"1","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/App.tsx":"2","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/RoutesApp.tsx":"3","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/Context/AuthProvider.tsx":"4","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/DeskView.tsx":"5","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/LoginView.tsx":"6","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/Context/hooks/useAuth.tsx":"7","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Helpers.ts":"8","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/RepeatComponent.tsx":"9","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalOrder.tsx":"10","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Header.tsx":"11","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/PageContainer.tsx":"12","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalConfirm.tsx":"13","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/FormLogin.tsx":"14","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalForgetPassword.tsx":"15","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/SelectItemsOrder.tsx":"16","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/TableOrders.tsx":"17","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Total.tsx":"18","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Menu.tsx":"19","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/EditView.tsx":"20","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/FormProfile.tsx":"21","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/FinalSummary.tsx":"22","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/AccordionFinalSummary.tsx":"23","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/ListUsersView.tsx":"24"},{"size":150,"mtime":1686767089472,"results":"25","hashOfConfig":"26"},{"size":389,"mtime":1688002706103,"results":"27","hashOfConfig":"26"},{"size":2224,"mtime":1688002598590,"results":"28","hashOfConfig":"26"},{"size":902,"mtime":1687983791080,"results":"29","hashOfConfig":"26"},{"size":3545,"mtime":1687990298529,"results":"30","hashOfConfig":"26"},{"size":1889,"mtime":1687974146755,"results":"31","hashOfConfig":"26"},{"size":1367,"mtime":1688002833791,"results":"32","hashOfConfig":"26"},{"size":1582,"mtime":1687991089577,"results":"33","hashOfConfig":"26"},{"size":647,"mtime":1687678038826,"results":"34","hashOfConfig":"26"},{"size":7245,"mtime":1687962564188,"results":"35","hashOfConfig":"26"},{"size":1306,"mtime":1687833160414,"results":"36","hashOfConfig":"26"},{"size":496,"mtime":1687640171705,"results":"37","hashOfConfig":"26"},{"size":1510,"mtime":1687901347266,"results":"38","hashOfConfig":"26"},{"size":3481,"mtime":1687991524065,"results":"39","hashOfConfig":"26"},{"size":1343,"mtime":1687802557098,"results":"40","hashOfConfig":"26"},{"size":1168,"mtime":1687751447360,"results":"41","hashOfConfig":"26"},{"size":2186,"mtime":1687884085266,"results":"42","hashOfConfig":"26"},{"size":723,"mtime":1687740517749,"results":"43","hashOfConfig":"26"},{"size":2460,"mtime":1687999333759,"results":"44","hashOfConfig":"26"},{"size":1569,"mtime":1688000874317,"results":"45","hashOfConfig":"26"},{"size":9176,"mtime":1687998408042,"results":"46","hashOfConfig":"26"},{"size":1136,"mtime":1687962534516,"results":"47","hashOfConfig":"26"},{"size":5440,"mtime":1687962597256,"results":"48","hashOfConfig":"26"},{"size":5556,"mtime":1688000716708,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"14rv0qr",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"53"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"53"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/index.tsx",[],[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/App.tsx",["127"],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/RoutesApp.tsx",["128"],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/Context/AuthProvider.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/DeskView.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/LoginView.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/Context/hooks/useAuth.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Helpers.ts",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/RepeatComponent.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalOrder.tsx",["129"],[],"/** @jsxImportSource @emotion/react */\nimport {\n  Button,\n  Cell,\n  Grid,\n  Heading,\n  HFlow,\n  Icon,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  VFlow,\n} from \"bold-ui\";\nimport { css } from \"@emotion/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { SelectItemsOrder } from \"./SelectItemsOrder\";\nimport { SingleValue } from \"react-select\";\nimport { TableOrder } from \"./TableOrders\";\nimport NumericInput from \"react-numeric-input\";\nimport { Total } from \"./Total\";\nimport { formatNumberWithTwoDigits, produtos } from \"./Helpers\";\nimport uuid from \"react-uuid\";\nimport axios from \"axios\";\n\ninterface ModalOrderProps {\n  open: boolean;\n  onClose(): void;\n  tableNumer: number;\n}\n\nexport interface ProductSaveType {\n  id: string;\n  order: string;\n  amount: number;\n  price: number;\n  desk: number;\n}\n\ninterface ProductQueryType {\n  id: string;\n  item: string;\n  price: number;\n}\n\ninterface ProductSelectType {\n  value: string;\n  label: string;\n}\n\nexport type SingleOptionType = SingleValue<ProductSelectType>;\n\nexport function ModalOrder(props: ModalOrderProps) {\n  const { open, onClose, tableNumer } = props;\n\n  const [amountValue, setAmountValue] = useState<number | null>(null);\n  const [total, setTotal] = useState<number>(0);\n  const [selectedItems, setSelectedItems] = useState<ProductSaveType[]>([]);\n  const [selectedOption, setSelectedOption] = useState<SingleOptionType | null>(\n    null\n  );\n\n  const ordersTable = selectedItems.filter((item) => item.desk === tableNumer);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const orders = await axios.post(\n          \"http://localhost:4000/queryOrdersByDesk\",\n          {\n            numberDesk: tableNumer,\n          }\n        );\n        setSelectedItems(orders.data);\n      } catch {}\n    };\n\n    fetchData(); // Chama a função fetchData ao montar o componente\n  }, [open, onClose]);\n\n  useEffect(() => {\n    const total = selectedItems\n      .filter((produto) => produto.desk === tableNumer)\n      .map((produto) => produto.price * produto.amount)\n      .reduce((acumulador, valorAtual) => acumulador + valorAtual, 0);\n\n    setTotal(total);\n  }, [selectedItems, tableNumer, setTotal]);\n\n  function convertSingleOptionTypeToProduct(\n    singleOptionType: SingleOptionType,\n    amountValue: number\n  ): ProductSaveType {\n    const id: string = uuid();\n    const item: string = singleOptionType?.label ? singleOptionType.label : \"\";\n    const amount: number = amountValue ? amountValue : 0;\n    const productFind: ProductQueryType | undefined = produtos.find(\n      (product) => {\n        return product.id === singleOptionType!.value;\n      }\n    );\n\n    if (productFind) {\n      const price: number = productFind.price;\n\n      const convertedProduct: ProductSaveType = {\n        id: productFind.id,\n        order: item,\n        amount: amount,\n        price: price,\n        desk: tableNumer,\n      };\n\n      return convertedProduct;\n    }\n\n    throw new Error(`Produto de ID ${id} não foi encontrado.`);\n  }\n\n  const handleNumericChange = (valueAsNumber: number | null) => {\n    setAmountValue(valueAsNumber);\n  };\n\n  const addElementToList = () => {\n    if (amountValue !== null && amountValue !== 0 && selectedOption !== null) {\n      const element: ProductSaveType = convertSingleOptionTypeToProduct(\n        selectedOption,\n        amountValue\n      );\n      setSelectedItems([...selectedItems, element]);\n      setTotal(Number((total + element.price * element.amount).toFixed(2)));\n      setSelectedOption(null);\n      setAmountValue(0);\n    }\n  };\n\n  const handleSelectChange = (option: SingleOptionType) => {\n    if (option && option.label) {\n      setSelectedOption(option);\n    }\n  };\n\n  const handleButtonSaveClick = async () => {\n    try {\n      await axios.post(\"http://localhost:4000/registerOrder\", {\n        pedidos: ordersTable,\n        desk: tableNumer,\n      });\n      onClose();\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <Modal\n        size=\"large\"\n        onClose={onClose}\n        open={open}\n        style={modalStyles}\n        closeOnBackdropClick={false}\n      >\n        <ModalBody>\n          <VFlow>\n            <HFlow alignItems=\"center\">\n              <Icon\n                icon=\"cutleryFilled\"\n                style={{ marginRight: \"0.5rem\" }}\n                size={3}\n                fill=\"info\"\n              />\n              <Heading level={1}>\n                Mesa {formatNumberWithTwoDigits(tableNumer)}\n              </Heading>\n            </HFlow>\n            <Grid gap={2} gapVertical={1} alignItems=\"flex-end\">\n              <Cell xs={12} sm={12} md={7} lg={7}>\n                <SelectItemsOrder\n                  handleChange={handleSelectChange}\n                  value={selectedOption}\n                ></SelectItemsOrder>\n              </Cell>\n              <Cell\n                xs={12}\n                sm={10}\n                md={3}\n                lg={3}\n                style={cellNumericInputStyles}\n              >\n                <NumericInput\n                  css={numericInputStyles}\n                  placeholder=\"Quantidade\"\n                  min={0}\n                  max={10}\n                  value={amountValue !== null ? amountValue : 0}\n                  onChange={handleNumericChange}\n                  required\n                ></NumericInput>\n              </Cell>\n              <Cell xs={12} sm={2} md={2} lg={2}>\n                <Button\n                  size=\"medium\"\n                  skin=\"default\"\n                  kind=\"primary\"\n                  style={buttonAdicionarStyles}\n                  onClick={addElementToList}\n                >\n                  Adicionar\n                </Button>\n              </Cell>\n              <Cell xs={12} sm={12} md={12} lg={12}>\n                <div css={divTableStyles}>\n                  <TableOrder\n                    items={ordersTable}\n                    onChangeItems={setSelectedItems}\n                  ></TableOrder>\n                </div>\n              </Cell>\n              <Cell xs={12} sm={12} md={12} lg={12}>\n                <Total value={total}></Total>\n              </Cell>\n            </Grid>\n          </VFlow>\n        </ModalBody>\n        <ModalFooter>\n          <HFlow justifyContent=\"flex-end\">\n            <Button onClick={onClose} kind=\"danger\">\n              Cancelar\n            </Button>\n            <Button kind=\"primary\" onClick={handleButtonSaveClick}>\n              Concluir\n            </Button>\n          </HFlow>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\nconst buttonAdicionarStyles = css`\n  padding: calc(0.4rem - 1px) 1rem !important;\n  width: 100%;\n`;\n\nconst numericInputStyles = css`\n  width: 100%;\n  min-height: 38px;\n  border-color: hsl(0, 0%, 80%) !important;\n  border-radius: 4px !important;\n  padding-left: 8px !important;\n\n  &:focus {\n    border-color: #2684ff !important;\n    box-shadow: 0 0 0 1px #2684ff !important;\n  }\n\n  span {\n    width: 100%;\n  }\n`;\n\nconst cellNumericInputStyles = css`\n  span {\n    width: 100%;\n  }\n`;\n\nconst divTableStyles = css`\n  overflow: auto;\n  border: 1px solid #d3d4dd;\n  border-radius: 0.375rem !important;\n  border-bottom: none;\n`;\n\nconst modalStyles = css`\n  @media (max-width: 767px) {\n    min-width: 100% !important;\n  }\n`;\n","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Header.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/PageContainer.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalConfirm.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/FormLogin.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/ModalForgetPassword.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/SelectItemsOrder.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/TableOrders.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Total.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/Menu.tsx",["130"],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/EditView.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/FormProfile.tsx",["131"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { Button, Cell, Grid, Icons, Select, TextField } from \"bold-ui\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { OptionType } from \"../view/EditView\";\nimport { UserTypeDB } from \"../view/ListUsersView\";\nimport { Field, FieldRenderProps, Form } from \"react-final-form\";\nimport { handleApiError, typesEmployees } from \"./Helpers\";\nimport { ModalConfirm } from \"./ModalConfirm\";\nimport { Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface FormProfileProps {\n  user: UserTypeDB | undefined;\n  type: OptionType | undefined;\n  editProfile?: boolean;\n  listUsers?: boolean;\n  addUser?: boolean;\n  viewProfile?: boolean;\n}\n\nexport interface FormValues {\n  name: string;\n  user: number;\n  type: OptionType;\n  password: string;\n  passwordConfirm: string;\n}\n\nexport function FormProfile(props: FormProfileProps) {\n  const { user, editProfile, listUsers, addUser } = props;\n\n  const history = useHistory();\n\n  const [isModalConfirmOpen, setIsModalConfirmOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formValues, setFormValues] = useState<FormValues | undefined>(\n    undefined\n  );\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const onSubmit = (values: FormValues) => {\n    setIsModalConfirmOpen(true);\n    setFormValues(values);\n  };\n\n  useEffect(() => {\n    const handleSubmit = async (values: FormValues | undefined) => {\n      if (isSubmitting && formValues) {\n        setIsModalConfirmOpen(false);\n        setIsSubmitting(false);\n        console.log(formValues);\n        try {\n          await axios.post(\"http://localhost:4000/register\", {\n            formValues: formValues,\n            editProfile: editProfile,\n          });\n          if (listUsers || addUser) {\n            history.push(\"/usuarios\");\n          } else {\n            console.log(values);\n            setSuccessMessage(\"Seu perfil foi atualizado com sucesso!\");\n            setTimeout(() => {\n              setSuccessMessage(\"\");\n            }, 3000);\n          }\n        } catch (error) {\n          handleApiError(error, setErrorMessage);\n        }\n        setTimeout(() => {\n          setSuccessMessage(\"\");\n        }, 3000);\n      }\n    };\n\n    if (isSubmitting) {\n      handleSubmit(formValues);\n    }\n  }, [isSubmitting]);\n\n  const TextFieldInput = ({\n    input,\n    meta,\n    label,\n    placeholder,\n    disabled,\n    max,\n    icon,\n    id,\n    onIconClick,\n  }: FieldRenderProps<any, HTMLElement> & {\n    title: string;\n    placeholder: string;\n    disabled: boolean;\n    max: number;\n    icon: Icons | undefined;\n    id: string | undefined;\n    onIconClick: boolean;\n  }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleIconClick = () => {\n      onIconClick && setShowPassword(!showPassword);\n    };\n\n    const inputType = showPassword ? \"text\" : \"password\";\n\n    return (\n      <TextField\n        icon={icon}\n        id={id}\n        type={onIconClick ? inputType : input.type}\n        label={label}\n        name={input.name}\n        value={input.value}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={input.onChange}\n        error={meta.touched && meta.error}\n        style={inputStyles}\n        maxLength={max}\n        onIconClick={handleIconClick}\n        clearable\n        required\n      />\n    );\n  };\n\n  const SelectInput = ({\n    input,\n    meta,\n    label,\n    placeholder,\n    disabled,\n  }: FieldRenderProps<any, HTMLElement> & {\n    title: string;\n    placeholder: string;\n    disabled: boolean;\n  }) => {\n    return (\n      <Select\n        label={label}\n        name={input.name}\n        value={input.value}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={input.onChange}\n        error={meta.touched && meta.error}\n        style={selectStyles}\n        itemIsEqual={(a, b) => a.value === b.value}\n        itemToString={(item) => (item ? item.label : \"\")}\n        items={typesEmployees}\n        required\n        clearable\n      />\n    );\n  };\n\n  return (\n    <>\n      <ModalConfirm\n        open={isModalConfirmOpen}\n        onClose={() => setIsModalConfirmOpen(false)}\n        onChange={() => setIsSubmitting(true)}\n        title={\"Confirmar atualização?\"}\n        description={\"Deseja salvar suas alterações?\"}\n      ></ModalConfirm>\n      {successMessage && <Alert variant=\"success\">{successMessage}</Alert>}\n      {errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert>}\n\n      <Form\n        onSubmit={onSubmit}\n        initialValues={\n          user\n            ? {\n                name: user.name,\n                user: user.user,\n                type: user.position,\n                password: \"\",\n                passwordConfirm: \"\",\n              }\n            : undefined\n        }\n        render={({ handleSubmit, form }) => (\n          <form\n            onSubmit={(event) => {\n              const promise = handleSubmit(event);\n              form.reset();\n              promise &&\n                promise.then(() => {\n                  form.reset();\n                });\n            }}\n          >\n            <Grid gap={2} gapVertical={1} justifyContent=\"flex-start\">\n              <Cell lg={6} md={6} sm={12} xs={12}>\n                <Field\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nome completo\"\n                  placeholder=\"Ex.: João da Silva\"\n                  max={30}\n                  onIconClick={false}\n                  component={TextFieldInput}\n                />\n              </Cell>\n              <Cell lg={4} md={4} sm={12} xs={12}>\n                <Field\n                  name=\"user\"\n                  label=\"Usuário\"\n                  placeholder=\"Digite o CPF do funcionário\"\n                  disabled={editProfile}\n                  max={11}\n                  onIconClick={false}\n                  component={TextFieldInput}\n                />\n              </Cell>\n              <Cell lg={2} md={2} sm={12} xs={12}>\n                <Field\n                  name=\"type\"\n                  label=\"Tipo\"\n                  placeholder=\"Tipo do funcionário\"\n                  onIconClick={false}\n                  component={SelectInput}\n                />\n              </Cell>\n              <Cell lg={6} md={6} sm={12} xs={12}>\n                <Field\n                  type=\"password\"\n                  name=\"password\"\n                  label=\"Senha\"\n                  placeholder=\"Escolha uma senha forte\"\n                  max={16}\n                  icon=\"zoomOutline\"\n                  id=\"clickable\"\n                  onIconClick={true}\n                  component={TextFieldInput}\n                />\n              </Cell>\n              <Cell lg={6} md={6} sm={12} xs={12}>\n                <Field\n                  type=\"password\"\n                  name=\"passwordConfirm\"\n                  label=\"Confirme a senha\"\n                  placeholder=\"Digite novamente a senha\"\n                  max={16}\n                  icon=\"zoomOutline\"\n                  id=\"clickable\"\n                  onIconClick={true}\n                  component={TextFieldInput}\n                />\n              </Cell>\n              <Cell lg={12} md={12} sm={12} xs={12} style={cellButtonsStyles}>\n                {listUsers && (\n                  <Cell lg={1} md={4} sm={6} xs={12}>\n                    <Button\n                      kind=\"danger\"\n                      size=\"medium\"\n                      style={buttonStyles}\n                      onClick={() => history.push(\"/usuarios\")}\n                    >\n                      Cancelar\n                    </Button>\n                  </Cell>\n                )}\n                <Cell lg={1} md={4} sm={6} xs={12}>\n                  <Button\n                    kind=\"primary\"\n                    size=\"medium\"\n                    type=\"submit\"\n                    style={buttonStyles}\n                  >\n                    Salvar\n                  </Button>\n                </Cell>\n              </Cell>\n            </Grid>\n          </form>\n        )}\n      />\n    </>\n  );\n}\nconst buttonStyles = css`\n  width: 100%;\n`;\n\nconst cellButtonsStyles = css`\n  display: inline-flex;\n  justify-content: end;\n  padding-right: 0 !important;\n  padding-left: 0 !important;\n`;\n\nconst inputStyles = css`\n  width: 100% !important;\n  min-height: 38px !important;\n  border-color: hsl(0, 0%, 80%) !important;\n  border-radius: 4px !important;\n  font-size: 1rem;\n\n  input {\n    width: 100% !important;\n    min-height: 38px !important;\n    border-color: hsl(0, 0%, 80%) !important;\n    border-radius: 4px !important;\n    font-size: 1rem;\n  }\n\n  span {\n    right: 1px !important;\n    border: 2px solid red !important;\n    background-color: grey !important;\n    color: white !important;\n  }\n`;\n\nconst selectStyles = css`\n  input {\n    min-height: 38px !important;\n    border-color: hsl(0, 0%, 80%) !important;\n    border-radius: 4px !important;\n    font-size: 1rem;\n  }\n\n  ul li {\n    font-size: 1rem;\n  }\n`;\n",[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/FinalSummary.tsx",[],[],"/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/components/AccordionFinalSummary.tsx",["132"],[],"/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { formatNumberWithTwoDigits } from \"./Helpers\";\nimport {\n  Button,\n  Cell,\n  Grid,\n  HFlow,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  VFlow,\n} from \"bold-ui\";\nimport { Total } from \"./Total\";\nimport { ModalConfirm } from \"./ModalConfirm\";\nimport axios from \"axios\";\nimport { ProductSaveType } from \"./ModalOrder\";\n\ninterface AccordionFinalSummaryProps {\n  numDesk: number;\n  fetchDataMesasOcupadas(): void;\n}\n\nconst blueArrow = require(\"../img/seta-fundo-azul.svg\").default;\nconst whiteArrow = require(\"../img/seta-fundo-branco.svg\").default;\n\nexport function AccordionFinalSummary(props: AccordionFinalSummaryProps) {\n  const { numDesk, fetchDataMesasOcupadas } = props;\n  console.log(numDesk);\n\n  const [pedidos, setPedidos] = useState<ProductSaveType[]>([]);\n  const [modalConfirmOpen, setModalConfirmOpen] = useState(false);\n\n  const fetchData = async () => {\n    try {\n      const pedidos = await axios.post(\n        \"http://localhost:4000/queryOrdersByDesk\",\n        {\n          numberDesk: numDesk,\n        }\n      );\n      setPedidos(pedidos.data);\n    } catch {}\n  };\n\n  const handleFreeDesk = async () => {\n    try {\n      await axios.post(\"http://localhost:4000/freeDesk\", {\n        numberDesk: numDesk,\n      });\n      fetchDataMesasOcupadas();\n      fetchData();\n      setModalConfirmOpen(false);\n    } catch {}\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    const interval = setInterval(fetchData, 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const precoTotal = pedidos.reduce(\n    (total, pedido) => total + pedido.price * pedido.amount,\n    0\n  );\n\n  const handleFinalizeOrder = () => {\n    setModalConfirmOpen(true);\n  };\n\n  const descriptionModalConfirm = (\n    <p>\n      Deseja finalizar o pedido da\n      <span css={boldDescriptionStyle}> MESA {numDesk}</span>?\n    </p>\n  );\n\n  return (\n    <>\n      <ModalConfirm\n        open={modalConfirmOpen}\n        onClose={() => setModalConfirmOpen(false)}\n        onChange={handleFreeDesk}\n        title={\"Finalizar?\"}\n        description={descriptionModalConfirm}\n      ></ModalConfirm>\n      <Accordion>\n        <Accordion.Item eventKey={numDesk.toString()} css={headerStyles}>\n          <Accordion.Header>\n            Mesa {formatNumberWithTwoDigits(numDesk)}\n          </Accordion.Header>\n          <Accordion.Body>\n            <div css={divTableStyles}>\n              <VFlow>\n                <Table style={tableStyles}>\n                  <TableHead>\n                    <TableRow>\n                      <TableHeader>Un</TableHeader>\n                      <TableHeader>Produto</TableHeader>\n                      <TableHeader>Preço</TableHeader>\n                      <TableHeader style={totalStyles}>Total</TableHeader>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {pedidos?.map((value, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{value.amount}</TableCell>\n                        <TableCell>{value.order}</TableCell>\n                        <TableCell>{value.price.toFixed(2)}</TableCell>\n                        <TableCell style={totalStyles}>\n                          R$\n                          {Number(\n                            formatNumberWithTwoDigits(\n                              value.price * value.amount\n                            )\n                          ).toFixed(2)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </VFlow>\n            </div>\n            <Grid style={gridStyles}>\n              <Cell xs={8} sm={8} md={6} lg={6} alignSelf=\"center\">\n                <Total value={precoTotal}></Total>\n              </Cell>\n              <Cell xs={4} sm={4} md={6} lg={6}>\n                <HFlow justifyContent=\"flex-end\">\n                  <Button kind=\"primary\" onClick={() => handleFinalizeOrder()}>\n                    Concluir\n                  </Button>\n                </HFlow>\n              </Cell>\n            </Grid>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n    </>\n  );\n}\n\nconst divTableStyles = css`\n  width: 100%;\n  overflow: auto;\n  border: 1px solid #d3d4dd;\n  border-radius: 10px !important;\n  border-bottom: none;\n`;\n\nconst tableStyles = css`\n  border: none !important;\n`;\n\nconst gridStyles = css`\n  margin-top: 1rem;\n`;\n\nconst totalStyles = css`\n  color: rgb(208, 30, 41);\n  font-weight: bold;\n  font-size: 1.25rem;\n`;\n\nconst headerStyles = css`\n  h2 button {\n    border-left: 4px solid #0069d0 !important;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-size: 1.25rem;\n    color: #232323;\n  }\n\n  .accordion-button::after {\n    background-image: url(${blueArrow});\n    background-size: cover;\n    background-position: center;\n    width: 3rem;\n    height: 3rem;\n  }\n\n  .accordion-button:not(.collapsed)::after {\n    background-image: url(${whiteArrow});\n  }\n\n  h2 button:not(.collapsed) {\n    background-color: #0069d0 !important;\n    border-left: 4px solid #0069d0 !important;\n    color: white;\n    box-shadow: none !important;\n  }\n`;\n\nconst boldDescriptionStyle = css`\n  font-weight: bold;\n`;\n","/home/daniel/Área de Trabalho/Trabalho-ProgWeb/web-trabalho/order-easy/frontend/src/view/ListUsersView.tsx",[],[],{"ruleId":"133","severity":1,"message":"134","line":8,"column":9,"nodeType":"135","messageId":"136","endLine":8,"endColumn":17},{"ruleId":"133","severity":1,"message":"137","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"139","line":77,"column":6,"nodeType":"140","endLine":77,"endColumn":21,"suggestions":"141"},{"ruleId":"133","severity":1,"message":"142","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":13},{"ruleId":"138","severity":1,"message":"143","line":82,"column":6,"nodeType":"140","endLine":82,"endColumn":20,"suggestions":"144"},{"ruleId":"138","severity":1,"message":"145","line":70,"column":6,"nodeType":"140","endLine":70,"endColumn":8,"suggestions":"146"},"@typescript-eslint/no-unused-vars","'numDesks' is assigned a value but never used.","Identifier","unusedVar","'ReactNode' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tableNumer'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'addUser', 'editProfile', 'formValues', 'history', and 'listUsers'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["149"],{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [open, onClose, tableNumer]",{"range":"156","text":"157"},"Update the dependencies array to be: [addUser, editProfile, formValues, history, isSubmitting, listUsers]",{"range":"158","text":"159"},"Update the dependencies array to be: [fetchData]",{"range":"160","text":"161"},[1867,1882],"[open, onClose, tableNumer]",[2457,2471],"[addUser, editProfile, formValues, history, isSubmitting, listUsers]",[1705,1707],"[fetchData]"]