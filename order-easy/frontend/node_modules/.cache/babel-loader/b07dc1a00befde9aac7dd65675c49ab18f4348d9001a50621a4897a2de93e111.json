{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setNativeValue = exports.composeHandlers = exports.setRef = exports.composeRefs = void 0;\n/**\n * Compose multiple react refs.\n *\n * @returns A new ref that passes down the Element to all ref arguments.\n */\nfunction composeRefs() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  return function (value) {\n    return refs.forEach(function (ref) {\n      return setRef(ref, value);\n    });\n  };\n}\nexports.composeRefs = composeRefs;\n/**\n * Changes the value of a ref.\n * The ref can be a function ref or a object ref.\n *\n * @param ref The ref to have its value changed.\n * @param value The new value.\n */\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    var mutableRef = ref;\n    mutableRef.current = value;\n  }\n}\nexports.setRef = setRef;\n/**\n * Compose multiple event handlers.\n *\n * @returns A new function that triggers all handlers passed as parameters, in order.\n */\nfunction composeHandlers() {\n  var handlers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    handlers[_i] = arguments[_i];\n  }\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return handlers.forEach(function (handler) {\n      return handler && handler.apply(void 0, args);\n    });\n  };\n}\nexports.composeHandlers = composeHandlers;\n/**\n * Invokes the native `value` property setter of an element.\n * From https://github.com/facebook/react/issues/10135#issuecomment-401496776\n *\n * @param element The element to invoke the setter on.\n * @param value The value to be set.\n */\nfunction setNativeValue(element, value) {\n  var prototype = Object.getPrototypeOf(element);\n  var _a = (Object.getOwnPropertyDescriptor(prototype, 'value') || {}).set,\n    prototypeValueSetter = _a === void 0 ? null : _a;\n  var _b = (Object.getOwnPropertyDescriptor(element, 'value') || {}).set,\n    valueSetter = _b === void 0 ? null : _b;\n  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  } else if (valueSetter) {\n    valueSetter.call(element, value);\n  } else {\n    throw new Error('The given element does not have a value setter');\n  }\n}\nexports.setNativeValue = setNativeValue;\n//# sourceMappingURL=react.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}