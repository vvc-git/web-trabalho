{"ast":null,"code":"\"use strict\";\n\n// From https://github.com/sandiiarov/use-events/blob/master/src/useClickOutside/index.tsx\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClickOutside = void 0;\nvar react_1 = require(\"react\");\n/**\n * Trigger a callback whenever a click is made outside the ref elements.\n *\n * @param ref The target element(s) to ignore.\n * @param onClickOutside The callback function to be called.\n */\nexports.useClickOutside = function (ref, onClickOutside) {\n  var _a = react_1.useState(false),\n    isActive = _a[0],\n    setActive = _a[1];\n  react_1.useEffect(function () {\n    var mousedown = function (e) {\n      var target = e.target;\n      var refs = getRefs(ref);\n      if (refs.filter(function (r) {\n        return !!r;\n      }).every(function (r) {\n        return !r.contains(target);\n      })) {\n        setActive(true);\n        onClickOutside(e);\n      }\n    };\n    var mouseup = function (e) {\n      var target = e.target;\n      var refs = getRefs(ref);\n      if (refs.filter(function (r) {\n        return !!r;\n      }).every(function (r) {\n        return !r.contains(target);\n      })) {\n        setActive(false);\n      }\n    };\n    document.addEventListener('mousedown', mousedown);\n    document.addEventListener('mouseup', mouseup);\n    return function () {\n      document.removeEventListener('mousedown', mousedown);\n      document.removeEventListener('mouseup', mouseup);\n    };\n  }, [ref, onClickOutside]);\n  return [isActive];\n};\nfunction getRefs(ref) {\n  if (Array.isArray(ref)) {\n    return ref.map(function (item) {\n      if (isRef(item)) return item.current;\n      return item;\n    });\n  } else if (isRef(ref)) {\n    return [ref.current];\n  } else {\n    return [ref];\n  }\n}\nfunction isRef(ref) {\n  return !!(ref === null || ref === void 0 ? void 0 : ref.current);\n}\n//# sourceMappingURL=useClickOutside.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}