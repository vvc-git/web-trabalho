{"ast":null,"code":"\"use strict\";\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRovingTabIndex = void 0;\nvar react_1 = require(\"react\");\nvar util_1 = require(\"../util\");\nvar defaultOptions = {\n  initialIndex: 0,\n  nextKeys: ['ArrowDown', 'ArrowRight'],\n  prevKeys: ['ArrowUp', 'ArrowLeft'],\n  firstKeys: ['Home'],\n  lastKeys: ['End'],\n  wrapAround: false\n};\nfunction useRovingTabIndex(options) {\n  var _a = util_1.merge({}, defaultOptions, options),\n    initialIndex = _a.initialIndex,\n    nextKeys = _a.nextKeys,\n    prevKeys = _a.prevKeys,\n    firstKeys = _a.firstKeys,\n    lastKeys = _a.lastKeys,\n    getItems = _a.getItems,\n    wrapAround = _a.wrapAround;\n  var rootRef = react_1.useRef();\n  // Initialize tabindex attributes:\n  react_1.useEffect(function () {\n    var items = getItems(rootRef.current);\n    items.forEach(function (item, idx) {\n      if (idx === initialIndex) {\n        item.setAttribute('tabindex', '0');\n      } else {\n        item.setAttribute('tabindex', '-1');\n      }\n    });\n  }, [initialIndex]);\n  // Manage child items focus event:\n  react_1.useEffect(function () {\n    var items = getItems(rootRef.current);\n    var handleChildFocus = function (event) {\n      items.forEach(function (item) {\n        return item.setAttribute('tabindex', '-1');\n      });\n      var target = event.currentTarget;\n      target.setAttribute('tabindex', '0');\n    };\n    items.forEach(function (item) {\n      return item.addEventListener('focus', handleChildFocus);\n    });\n    return function () {\n      return items.forEach(function (item) {\n        return item.removeEventListener('focus', handleChildFocus);\n      });\n    };\n  }, [options]);\n  // Manage keydown event on root ref:\n  react_1.useEffect(function () {\n    var getTargetIndex = function (items, key) {\n      var activeElement = document.activeElement;\n      var activeIndex = items.indexOf(activeElement);\n      if (nextKeys.includes(key)) {\n        return activeIndex < items.length - 1 ? activeIndex + 1 : wrapAround ? 0 : null;\n      }\n      if (prevKeys.includes(key)) {\n        return activeIndex > 0 ? activeIndex - 1 : wrapAround ? items.length - 1 : null;\n      }\n      if (firstKeys.includes(key)) {\n        return 0;\n      }\n      if (lastKeys.includes(key)) {\n        return items.length - 1;\n      }\n      return null;\n    };\n    var handleKeyDown = function (event) {\n      if (__spreadArrays(nextKeys, prevKeys, firstKeys, lastKeys).includes(event.key)) {\n        var items = getItems(rootRef.current);\n        var targetIndex = getTargetIndex(items, event.key);\n        var target = items[targetIndex];\n        if (target) {\n          target.focus();\n        }\n        event.preventDefault();\n      }\n    };\n    rootRef.current.addEventListener('keydown', handleKeyDown);\n    return function () {\n      return rootRef.current.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [options]);\n  return rootRef;\n}\nexports.useRovingTabIndex = useRovingTabIndex;\n//# sourceMappingURL=useRovingTabIndex.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}