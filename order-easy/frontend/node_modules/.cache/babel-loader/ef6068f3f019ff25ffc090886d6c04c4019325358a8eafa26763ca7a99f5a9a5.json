{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidDate = exports.isBelongingAWeek = exports.isSameDay = exports.createMonthMatrix = exports.createWeekArray = exports.getLastDayOfMonth = exports.getFirstDayOfMonth = void 0;\n/**\n * Calculate the first day of a month.\n *\n * @param target Target month.\n * @returns A new date which is the first day of the target month.\n */\nexports.getFirstDayOfMonth = function (target) {\n  var firstDayOfMonth = new Date(target);\n  firstDayOfMonth.setDate(1);\n  return firstDayOfMonth;\n};\n/**\n * Calculate the last day of a month.\n * @param target  Target month.\n * @returns A new date which is the last day of the target month.\n */\nexports.getLastDayOfMonth = function (target) {\n  return new Date(target.getFullYear(), target.getMonth() + 1, 0);\n};\n/**\n * Creates an ordered array of the week containing the target date\n *\n * @param target Target date of the week\n * @returns An array starting by sunday and finished by saturday which includes the target date\n */\nexports.createWeekArray = function (target) {\n  var week = [];\n  for (var i = 0; i < 7; i++) {\n    var d = new Date(target);\n    d.setDate(target.getDate() - target.getDay() + i);\n    week.push(d);\n  }\n  return week;\n};\n/**\n * Creates an array of weeks for the target month. Each week is itself an array of dates containing the week's dates.\n *\n * @param target The target month to create.\n * @returns A new array of array of dates containing all month dates.\n */\nexports.createMonthMatrix = function (target) {\n  target.setHours(0, 0, 0, 0);\n  var firstDayOfMonth = exports.getFirstDayOfMonth(target);\n  var lastDayOfMonth = exports.getLastDayOfMonth(target);\n  var weeks = [];\n  var curr = firstDayOfMonth;\n  while (true) {\n    var week = exports.createWeekArray(curr);\n    if (week[0] > lastDayOfMonth && !exports.isSameDay(week[0], lastDayOfMonth)) {\n      break;\n    } else {\n      weeks.push(week);\n      curr = new Date(curr);\n      curr.setDate(curr.getDate() + 7);\n    }\n  }\n  return weeks;\n};\n/**\n * Check if two dates belongs to the same day.\n *\n * @param d1 First date\n * @param d2 Second date\n * @returns Whether the dates are the same day, month and year\n */\nexports.isSameDay = function (d1, d2) {\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n};\n/**\n * Check if the day belongs to the week\n *\n * @param day A day to check\n * @param week A week\n * @returns Whether the day belongs to the week\n */\nexports.isBelongingAWeek = function (day, week) {\n  day.setHours(0, 0, 0, 0);\n  return day >= week.start && day <= week.end;\n};\n/**\n * Check if the parameter is a valid date.\n */\nexports.isValidDate = function (possibleDate) {\n  // If possibleDate is not a valid date, getTime() will return NaN, and NaN is never equal to itself.\n  // eslint-disable-next-line no-self-compare\n  return possibleDate && possibleDate.getTime() === possibleDate.getTime();\n};\n//# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}