"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlledMonthRangeCalendar = void 0;
var react_1 = __importDefault(require("react"));
var util_1 = require("../util");
var MonthRangeCalendar_1 = require("./MonthRangeCalendar");
function ControlledMonthRangeCalendar(props) {
    var inputOnFocus = props.inputOnFocus, value = props.value, onChange = props.onChange, onMonthClick = props.onMonthClick, rest = __rest(props, ["inputOnFocus", "value", "onChange", "onMonthClick"]);
    var controllMonthClick = function (month) {
        onMonthClick && onMonthClick(month);
        if (inputOnFocus === 1) {
            if (util_1.isLessThan(month, value === null || value === void 0 ? void 0 : value.start)) {
                onChange({ start: month, end: value === null || value === void 0 ? void 0 : value.end });
            }
            else if (util_1.isGreaterThan(month, value === null || value === void 0 ? void 0 : value.end)) {
                onChange({ start: month, end: undefined });
            }
            else {
                onChange({ start: month, end: value === null || value === void 0 ? void 0 : value.end });
            }
            return;
        }
        if (inputOnFocus === 2) {
            if ((value === null || value === void 0 ? void 0 : value.end) && util_1.isLessThan(month, value === null || value === void 0 ? void 0 : value.start)) {
                onChange({ start: month, end: undefined });
            }
            else {
                onChange({ start: value === null || value === void 0 ? void 0 : value.start, end: month });
            }
        }
    };
    return react_1.default.createElement(MonthRangeCalendar_1.MonthRangeCalendar, __assign({}, rest, { value: value, onMonthClick: controllMonthClick, inputOnFocus: inputOnFocus }));
}
exports.ControlledMonthRangeCalendar = ControlledMonthRangeCalendar;
//# sourceMappingURL=ControlledMonthRangeCalendar.js.map