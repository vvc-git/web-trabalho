"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformRangeReferenceMonth = exports.disabledByMonth = exports.isSameReferenceMonth = exports.isGreaterThan = exports.isLessThan = exports.isLessOrEqualThan = exports.isGreaterOrEqualThan = void 0;
/**
 * Check if the first reference month is bigger than or equal to the second reference month
 *
 * @param month1 First reference month
 * @param month2 Second reference month
 */
exports.isGreaterOrEqualThan = function (month1, month2) {
    return exports.isGreaterThan(month1, month2) || exports.isSameReferenceMonth(month1, month2);
};
/**
 * Check if the first reference month is less than or equal to the second reference month
 *
 * @param month1 First reference month
 * @param month2 Second reference month
 */
exports.isLessOrEqualThan = function (month1, month2) {
    return exports.isLessThan(month1, month2) || exports.isSameReferenceMonth(month1, month2);
};
/**
 * Check if the first reference month is less than the second reference month
 *
 * @param month1 First reference month
 * @param month2 Second reference month
 */
exports.isLessThan = function (month1, month2) {
    if ((month1 === null || month1 === void 0 ? void 0 : month1.year) === (month2 === null || month2 === void 0 ? void 0 : month2.year)) {
        return (month1 === null || month1 === void 0 ? void 0 : month1.month) < (month2 === null || month2 === void 0 ? void 0 : month2.month);
    }
    else {
        return (month1 === null || month1 === void 0 ? void 0 : month1.year) < (month2 === null || month2 === void 0 ? void 0 : month2.year);
    }
};
/**
 * Check if the first reference month is bigger than the second reference month
 *
 * @param month1 First reference month
 * @param month2 Second reference month
 */
exports.isGreaterThan = function (month1, month2) {
    if ((month1 === null || month1 === void 0 ? void 0 : month1.year) === (month2 === null || month2 === void 0 ? void 0 : month2.year)) {
        return (month1 === null || month1 === void 0 ? void 0 : month1.month) > (month2 === null || month2 === void 0 ? void 0 : month2.month);
    }
    else {
        return (month1 === null || month1 === void 0 ? void 0 : month1.year) > (month2 === null || month2 === void 0 ? void 0 : month2.year);
    }
};
/**
 * Check if the first reference month is equal to the second reference month
 *
 * @param month1 First reference month
 * @param month2 Second reference month
 */
exports.isSameReferenceMonth = function (month1, month2) {
    return (month1 === null || month1 === void 0 ? void 0 : month1.year) === (month2 === null || month2 === void 0 ? void 0 : month2.year) && (month1 === null || month1 === void 0 ? void 0 : month1.month) === (month2 === null || month2 === void 0 ? void 0 : month2.month);
};
/**
 * Check if a reference month is between the minimum and maximum values
 *
 * @param minMonth The minimum value
 * @param maxMonth The maximum value
 */
exports.disabledByMonth = function (minMonth, maxMonth) {
    return function (month) {
        return (minMonth && exports.isLessThan(month, minMonth)) || (maxMonth && exports.isGreaterThan(month, maxMonth));
    };
};
/**
 * Transform a range reference month in date range
 *
 * @param range The range to be transformed
 */
exports.transformRangeReferenceMonth = function (range) { return ({
    startDate: range.start ? new Date(range.start.year, range.start.month, 1, 0, 0, 0) : undefined,
    endDate: range.end ? new Date(range.end.year, range.end.month + 1, 0, 0, 0, 0) : undefined,
}); };
//# sourceMappingURL=util.js.map