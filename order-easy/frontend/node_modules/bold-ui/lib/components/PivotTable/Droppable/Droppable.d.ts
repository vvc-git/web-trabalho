/// <reference types="react" />
import { DroppableFilter } from './types/Filter';
export interface DroppableProps<T> {
    /**
     * The name of the droppable, as an identifier
     */
    name: string;
    /**
     * The name of the type of draggable accepted by the droppable. Items can be dragged between droppables that accept the same type of draggables.
     */
    accept: string;
    /**
     * Map of all the keys to a display name of the key and a formatter and ordenator for the filter options
     */
    keyMapping: Map<keyof T, {
        keyName: string;
        formatter?: (value: string) => string;
        ordenator?: (a: string, b: string) => number;
    }>;
    /**
     * Array of keys currently present in this component
     */
    keyState: Array<keyof T>;
    /**
     * Map of keys to the state of their filters
     */
    /**
     * Object that contains the keys and it's filter options,
     * the filters chosen and a function that updates the chosen filters of a key
     */
    filter?: DroppableFilter<T>;
    /**
     * Function that updates the keyState of this component
     */
    handleKeyUpdate: (values: Array<keyof T>) => void;
    /**
     * Function used to navigate a draggable between droppables using the directional arrows
     */
    onKeyNav?: (dir: 'left' | 'right' | 'up' | 'down' | null, origin: string, key?: keyof T) => void;
}
export interface DragItem<T> {
    /**
     * Name of the item, as an identifier
     */
    name: keyof T;
    /**
     * The type of droppable item can be dropped on
     */
    type: string;
    /**
     * Name of the origin droppable of the item
     */
    origin: string;
}
export declare function Droppable<T>(props: DroppableProps<T>): JSX.Element;
