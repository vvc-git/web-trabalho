"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.createMonthStylesFn = exports.defaultModifierStyles = exports.defaultModifiers = exports.MonthPicker = void 0;
var emotion_1 = require("emotion");
var react_1 = __importStar(require("react"));
var i18n_1 = require("../../i18n");
var styles_1 = require("../../styles");
var locale_1 = require("../../util/locale");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var util_1 = require("../MonthRangePicker/util");
var Text_1 = require("../Text");
exports.MonthPicker = react_1.forwardRef(function (props, ref) {
    var visibleMonth = props.visibleMonth, modifierStyles = props.modifierStyles, modifiers = props.modifiers, formatter = props.formatter, onMouseLeave = props.onMouseLeave, onMonthHover = props.onMonthHover, onMonthClick = props.onMonthClick, onVisibleMonthChange = props.onVisibleMonthChange, isDisabled = props.isDisabled, className = props.className, rest = __rest(props, ["visibleMonth", "modifierStyles", "modifiers", "formatter", "onMouseLeave", "onMonthHover", "onMonthClick", "onVisibleMonthChange", "isDisabled", "className"]);
    var _a = styles_1.useStyles(exports.createStyles), classes = _a.classes, theme = _a.theme;
    var locale = i18n_1.useLocale();
    var onLeftClick = function () {
        var year = visibleMonth.year - 1;
        return onVisibleMonthChange({ month: visibleMonth.month, year: year });
    };
    var onRightClick = function () {
        var year = visibleMonth.year + 1;
        return onVisibleMonthChange({ month: visibleMonth.month, year: year });
    };
    var baseYearDate = new Date(visibleMonth.year, 1, 1, 0, 0, 0, 0);
    var yearFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { year: 'numeric' });
    var monthNames = locale_1.getMonthNames(locale_1.getUserLocale(), formatter);
    var allModifiers = react_1.useMemo(function () { return (__assign(__assign({}, exports.defaultModifiers), modifiers)); }, [modifiers]);
    var allModifierStyles = react_1.useMemo(function () { return (__assign(__assign({}, exports.defaultModifierStyles), modifierStyles)); }, [modifierStyles]);
    var createMonthStyles = react_1.useMemo(function () { return exports.createMonthStylesFn(allModifiers, allModifierStyles, theme); }, [
        allModifiers,
        allModifierStyles,
        theme,
    ]);
    var handleMonthHover = react_1.useCallback(function (month) { return function () { return onMonthHover(month); }; }, [onMonthHover]);
    var handleMonthClick = react_1.useCallback(function (month) { return function () {
        onVisibleMonthChange(month);
        return onMonthClick && onMonthClick(month);
    }; }, [onMonthClick, onVisibleMonthChange]);
    return (react_1.default.createElement("div", __assign({ className: emotion_1.css(classes.container, className), ref: ref }, rest),
        react_1.default.createElement("div", { className: classes.months },
            react_1.default.createElement("div", { className: classes.item },
                react_1.default.createElement(Button_1.Button, { title: locale.calendar.previousYear, size: 'small', skin: 'ghost', onClick: onLeftClick },
                    react_1.default.createElement(Icon_1.Icon, { icon: 'angleLeft' }))),
            react_1.default.createElement("div", { className: classes.item },
                react_1.default.createElement(Text_1.Text, { fontWeight: 'bold', fontSize: 0.875 }, yearFormatter.format(baseYearDate))),
            react_1.default.createElement("div", { className: classes.item },
                react_1.default.createElement(Button_1.Button, { title: locale.calendar.nextYear, size: 'small', skin: 'ghost', onClick: onRightClick },
                    react_1.default.createElement(Icon_1.Icon, { icon: 'angleRight' }))),
            monthNames.map(function (month, index) { return (react_1.default.createElement("div", { key: index, onMouseLeave: onMouseLeave, className: emotion_1.css(classes.item) },
                react_1.default.createElement(Button_1.Button, { title: month.long, onClick: handleMonthClick({ month: index, year: visibleMonth.year }), skin: 'ghost', onMouseOver: handleMonthHover({ month: index, year: visibleMonth.year }), style: emotion_1.css(classes.button, createMonthStyles({ month: index, year: visibleMonth.year })), disabled: isDisabled && isDisabled({ month: index, year: visibleMonth.year }) }, month.short))); }))));
});
exports.MonthPicker.defaultProps = {
    onMonthClick: function () { return null; },
    onMonthHover: function () { return null; },
};
exports.defaultModifiers = {
    current: function (month) {
        return util_1.isSameReferenceMonth({ month: new Date().getMonth(), year: new Date().getFullYear() }, month);
    },
    selected: function () { return false; },
};
exports.defaultModifierStyles = {
    current: function () { return ({
        fontWeight: 'bold',
        textDecoration: 'underline',
    }); },
    selected: function (theme) { return ({
        background: theme.pallete.primary.main,
        color: theme.pallete.surface.main,
        ':hover': {
            background: theme.pallete.primary.main + '!important',
            color: theme.pallete.surface.main,
        },
    }); },
};
exports.createMonthStylesFn = function (modifiers, styles, theme) { return function (month) {
    return Object.keys(modifiers).reduce(function (s, modifier) {
        if (!styles[modifier]) {
            throw new Error("You must provied a modifierStyle for predicate \"" + modifier + "\"");
        }
        return __assign(__assign({}, s), (modifiers[modifier](month, null) ? styles[modifier](theme) : {}));
    }, {});
}; };
exports.createStyles = function (theme) { return ({
    container: {
        backgroundColor: theme.pallete.surface.main,
        display: 'inline-block',
        padding: '1rem',
        border: "1px solid " + theme.pallete.divider,
        boxShadow: theme.shadows.outer['20'],
        borderRadius: theme.radius.popper,
    },
    header: {
        padding: '0rem 1.5rem 0rem 1rem',
    },
    months: {
        margin: '-0.25rem -0.25rem',
        display: 'grid',
        gridTemplateColumns: 'repeat(3, 1fr)',
        alignItems: 'center',
    },
    item: {
        textAlign: 'center',
        margin: '0.25rem 0.25rem',
        borderRadius: '0.25rem',
    },
    button: {
        padding: 'calc(0.25rem - 1px) 1rem',
        transitionProperty: 'background',
        minWidth: '70px',
    },
    active: {
        background: theme.pallete.primary.main,
        color: theme.pallete.surface.main,
    },
}); };
//# sourceMappingURL=MonthPicker.js.map